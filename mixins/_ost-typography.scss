// Custom typographical mixins
// Dependencies: typeplate variables

// -- Provide PX backup to REM sizing for IE8 support.
//  - Replacing x-rem for consistent naming conventions.
@mixin o-rem($property, $values) {
  @include x-rem($property, $values);
}

// -- Provide PX backup to REM sizing for IE8 support.
//  - DEPRECATED - Use o-rem instead.
@mixin x-rem($property, $values) {
  // Empty list for all values in px
  $px-values: ();
  $rem-values: ();

  // Iterate over entries
  @each $value in $values {
    // If the value is zero, return 0
    @if $value == 0 or type_of($value) != number {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value);
    }
    // If the value is not zero, convert it from rem to px
    @else {
      $px-values: append($px-values, o-rem2px($value));
      $rem-values: append($rem-values, #{$value}rem);
    }
  }

  // Return the property and its list of converted values
  #{$property}: #{$px-values};
  #{$property}: #{$rem-values};
}

// Apply certain styles to all headers.
@mixin headers {
  h1,h2,h3,h4,h5,h6 {
    @content;
  }
}

// Scale Header Sizes
@mixin header-font-scale($scalar: 1) {
  h1 {@include type-scale($alpha   * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
  h2 {@include type-scale($beta    * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
  h3 {@include type-scale($gamma   * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
  h4 {@include type-scale($delta   * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
  h5 {@include type-scale($epsilon * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
  h6 {@include type-scale($zeta    * $scalar, $font-base, '#{$type-scale-unit-value}', $measure);}
}

// Auto-scale Header Font Sizes
// @param $start - The rem width to start scaling. (Outer breakpoint)
// @param $stop  - The rem width to stop scaling.  (Inner breakpoint)
@mixin header-scale($start, $stop: 30, $interval: 9, $min-scale: 0.60) {
  $itt: 1;
  $bp: 0;

  @while $itt < $interval {
    $last: $bp;
    $bp: ((($start - $stop) / $interval) * ($interval - $itt)) + $stop;
    $scale: 1 - ((1 - $min-scale) / ($interval - 1)) * $itt;

    @if $last > 0 {
      @media (max-width: $bp) {
        @include header-font-scale($scale);
      }
    } @else {
      @media (max-width: $bp) {
        @include header-font-scale($scale);
      }
    }

    $itt: $itt + 1;
  }
}

// Hide an element but still make it accessible to screen readers.
// Borrowed from Drupal
@mixin invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
}

// Apply a background to simulate lined paper.
// - height: The line height or rule of the lined paper.
// - color: The line color;
// - extra: Number of extra, blank lines to add after the text.
// - thick: Scale up the line thickness.
@mixin lined-paper($height, $color, $extra: 0, $thick: 1) {
  $thickness: percentage(1 - ((.05 * $thick) / ($height / ($height * 0 + 1))));

  @include linear-gradient(top, transparent 0, transparent $thickness, $color $thickness, $color 100%);
  background-repeat: repeat-y;
  background-size: 100% $height;
  background-position: 0 (-.15 * $height);
  line-height: $height;
  padding-bottom: $height * $extra;
}
